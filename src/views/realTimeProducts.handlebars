<main>
  <h1>TIENDA</h1>
  <div id="product-list" class="product-list">
    {{#each products}}
      <div class="product-card">
        <button class="delete-product admin-only" data-id="{{_id}}">x</button>
        <h3 class="product-title">{{title}}</h3>
        <p>{{description}}</p>
        <p>Precio: ${{price}}</p>
        <p>Stock: {{stock}}</p>
        {{#if thumbnails}}
          {{#each thumbnails}}
            <img src="{{this}}" alt="Product Thumbnail" class="product-thumbnail">
          {{/each}}
        {{/if}}
        <button class="add-to-cart" data-id="{{_id}}" data-stock="{{stock}}">Agregar al Carrito</button>
      </div>
    {{/each}}
  </div>
  <div id="pagination-controls">
    {{#if hasPrevPage}}
      <a href="/realtimeproducts?page={{prevPage}}{{#if category}}&category={{category}}{{/if}}" class="pagination-button">«</a>
    {{/if}}
    <span id="page-info">Página {{currentPage}} de {{totalPages}}</span>
    {{#if hasNextPage}}
      <a href="/realtimeproducts?page={{nextPage}}{{#if category}}&category={{category}}{{/if}}" class="pagination-button">»</a>
    {{/if}}
  </div>
</main>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const socket = io(); // Conectar con WebSockets
  const cartCount = document.getElementById('cart-count');
  const cartId = localStorage.getItem('cartId') || 'default-cart-id'; // Utilizar un único ID de carrito

  const updateCartCount = async () => {
    try {
      const response = await fetch(`/api/carts/${cartId}`);
      if (response.ok) {
        const cart = await response.json();
        const count = cart.products.reduce((total, product) => total + product.quantity, 0);
        cartCount.textContent = count;
        cartCount.style.display = count > 0 ? 'block' : 'none';
      } else {
        console.error("Error al obtener el carrito");
      }
    } catch (error) {
      console.error("Error al obtener el carrito:", error);
    }
  };

  // Escuchar eventos de WebSockets para actualizar productos en tiempo real
  socket.on("updateProducts", (newProduct) => {
    console.log("Nuevo producto recibido:", newProduct);
    location.reload(); // Recargar la página para actualizar la lista de productos
  });

  socket.on("productDeleted", (productId) => {
    console.log("Producto eliminado:", productId);
    location.reload(); // Recargar la página para actualizar la lista de productos
  });

  socket.on("productAddedToCart", (data) => {
    console.log("Producto agregado al carrito:", data);
    updateCartCount(); // Actualizar el contador del carrito
  });

  updateCartCount(); // Inicializar el contador del carrito
});
</script>