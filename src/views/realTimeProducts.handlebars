<main>
  <h1>TIENDA</h1>
  <div id="product-list" class="product-list">
    {{#each products}}
      <div class="product-card">
        {{#if ../isAdmin}}
          <button class="delete-product admin-only" data-id="{{_id}}">x</button>
        {{/if}}
        <h3 class="product-title">{{title}}</h3>
        <p>{{description}}</p>
        <p>${{price}}</p>
        <p>Stock: {{stock}}</p>
        {{#if thumbnails}}
          {{#each thumbnails}}
            <img src="{{this}}" alt="Product Thumbnail" class="product-thumbnail">
          {{/each}}
        {{/if}}
        <button class="add-to-cart" data-id="{{_id}}" data-stock="{{stock}}">Agregar al Carrito</button>
      </div>
    {{/each}}
  </div>
  <div id="pagination-controls">
    {{#if hasPrevPage}}
      <a href="/realtimeproducts?page={{prevPage}}{{#if category}}&category={{category}}{{/if}}" class="pagination-button">«</a>
    {{/if}}
    <span id="page-info">Página {{currentPage}} de {{totalPages}}</span>
    {{#if hasNextPage}}
      <a href="/realtimeproducts?page={{nextPage}}{{#if category}}&category={{category}}{{/if}}" class="pagination-button">»</a>
    {{/if}}
  </div>
</main>
<script type="module">
  import { getCurrentUser } from '/js/layout.js';

  

  document.addEventListener("DOMContentLoaded", async () => {
    const socket = io();
    const cartCount = document.getElementById('cart-count');
    const cartId = localStorage.getItem('cartId') || 'default-cart-id';

    // Agregar manejador para borrar productos
    document.querySelectorAll(".delete-product").forEach(button => {
      button.addEventListener("click", async (event) => {
        const productId = event.target.getAttribute("data-id");

        try {
          const user = await getCurrentUser(); // Usar la función correctamente
          if (!user || user.role !== 'admin') {
            notifications.error('No tienes permisos para eliminar productos');
            return;
          }

          const response = await fetch(`/api/products/${productId}`, {
            method: "DELETE",
            credentials: 'include'
          });

          if (response.ok) {
            notifications.success('Producto eliminado exitosamente');
            socket.emit('productDeleted', productId);
            setTimeout(() => location.reload(), 1500);
          } else {
            const error = await response.json();
            notifications.error(error.error || 'Error al eliminar producto');
          }
        } catch (error) {
          console.error('Error:', error);
          notifications.error('Error al eliminar producto');
        }
      });
    });

    const updateCartCount = async () => {
      try {
        const response = await fetch(`/api/carts/${cartId}`);
        if (response.ok) {
          const cart = await response.json();
          const count = cart.products.reduce((total, product) => total + product.quantity, 0);
          cartCount.textContent = count;
          cartCount.style.display = count > 0 ? 'block' : 'none';
        } else {
          console.error("Error al obtener el carrito");
        }
      } catch (error) {
        console.error("Error al obtener el carrito:", error);
      }
    };

    updateCartCount();
  });
</script>